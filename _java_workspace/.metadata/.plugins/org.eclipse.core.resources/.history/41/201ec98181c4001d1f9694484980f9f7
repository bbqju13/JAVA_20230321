package day17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.OptionalDouble;
import java.util.stream.Stream;

public class LambdaEx02 {

	public static void main(String[] args) {
		/* Stream(스트림) : 자료의 대상과 관계없이 동일한 연산을 수행할 수 있도록 해주는 반복자
		 * 요소가 하나씩 흘러가는 형태
		 * 스트림을 생성하여 연산을 수행하면 스트림은 소모가 됨.
		 * 재사용 불가 -> 다른 연산을 하렴ㄴ 스트림을 다시 생성 해야 됨.
		 * 
		 * -좋은점
		 * 스트림의 연산은 기존자료를 변경하지않음.
		 * 중간연산 : filter(조건에 맞는 요소 추출), distinct(중복제거), sorted(정렬), map(추출)
		 * 최종연산 : sum(), forEach(), reduce(계산)
		 * */
		Stream<Integer> integerStream1 = Stream.of(1,2,3,4,5,6,7,8,9);
		
		int[] arr = {1,2,3,4,5};
		long cnt = Arrays.stream(arr).count();
		System.out.println(cnt);
		
		int sum = Arrays.stream(arr).sum();
		System.out.println(sum);
		
		OptionalDouble avg = Arrays.stream(arr).average();
		System.out.println(avg);
		
		//성적배열 a에서 70점 이상인 점수만 합계
		int[] a = {12, 11, 14, 15, 77, 88, 99, 55};
		int sum1=0;
		for(int i=0; i<a.length; i++) {
			if(a[i] >= 70) {
				sum1+=a[i];
			}
		}
		System.out.println("java로 구현한 sum :"+sum1);
		
		int sum2 = Arrays.stream(a).filter(b->b>=70).sum();
		System.out.println("Stream으로 구현한 sum :"+sum2);
		
		// 리스트로 성적리스트를 생성하고, 스트림을 생성후 70이상인 점수만 합계
		ArrayList<Integer> number = new ArrayList<Integer>();
		number.add(12);
		number.add(11);
		number.add(14);
		number.add(15);
		number.add(77);
		number.add(88);
		number.add(99);
		number.add(55);

		Stream<Integer> s = number.stream().filter(b->b>=70);
		
		s.forEach(System.out::println);
	}

}
